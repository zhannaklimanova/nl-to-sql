[
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) LEFT OUTER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) WHERE main_app_source.segment_id = 4063 ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SELECT inst.siglum AS institution_siglum, src.shelfmark AS source_shelfmark, src.title AS source_title FROM public.main_app_source AS src LEFT JOIN public.main_app_institution AS inst ON src.holding_institution_id = inst.id ORDER BY inst.siglum ASC, src.shelfmark ASC;",
                "predicted_output_path": "predicted_outputs/sources/gpt/s1.csv"
            },
            "claude": {
                "sql_query": "SELECT * FROM main_app_source WHERE segment_id = (SELECT id FROM main_app_segment WHERE name = 'CANTUS Database') ORDER BY (SELECT siglum FROM main_app_institution WHERE id = main_app_source.holding_institution_id) ASC, shelfmark ASC;",
                "predicted_output_path": "predicted_outputs/sources/claude/s1.csv"
            }
        },
        "gold_output_path": "gold_outputs/sources/s1.csv",
        "natural_language_inputs": [
            "Given this database schema, generate an SQL query that will show me all the Sources in the 'CANTUS Database' segment, sorted by institution siglum and source shelfmark."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) WHERE (UPPER(main_app_institution.country::text) LIKE UPPER('%Australia%') AND main_app_source.segment_id = 4063) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SELECT s.* FROM public.main_app_source s JOIN public.main_app_institution i ON s.holding_institution_id = i.id WHERE i.country = 'Australia' ORDER BY i.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/gpt/s2.csv"
            },
            "claude": {
                "sql_query": "SELECT s.* FROM main_app_source s JOIN main_app_segment seg ON s.segment_id = seg.id JOIN main_app_institution i ON s.holding_institution_id = i.id WHERE seg.name = 'CANTUS Database' AND i.country = 'Australia' ORDER BY i.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/claude/s2.csv"
            }
        },
        "gold_output_path": "gold_outputs/sources/s2.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'CANTUS Database' segment from 'Australia', sorted by institution siglum and source shelfmark."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) INNER JOIN main_app_source_century ON (main_app_source.id = main_app_source_century.source_id) INNER JOIN main_app_century ON (main_app_source_century.century_id = main_app_century.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) WHERE (UPPER(main_app_institution.country::text) LIKE UPPER('%Australia%') AND UPPER(main_app_century.name::text) LIKE UPPER('%16th century (2nd half)%') AND main_app_source.segment_id = 4063) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SELECT s.id, s.title, s.siglum, s.shelfmark FROM public.main_app_source AS s JOIN public.main_app_institution AS i ON s.holding_institution_id = i.id JOIN public.main_app_source_century AS sc ON s.id = sc.source_id JOIN public.main_app_century AS c ON sc.century_id = c.id WHERE i.country = 'Australia' AND c.name = '16th century (2nd half)' AND s.full_source = TRUE ORDER BY s.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/gpt/s3.csv"
            },
            "claude": {
                "sql_query": "SELECT s.* FROM main_app_source s JOIN main_app_segment seg ON s.segment_id = seg.id JOIN main_app_source_century sc ON s.id = sc.source_id JOIN main_app_century c ON sc.century_id = c.id JOIN main_app_institution i ON s.holding_institution_id = i.id WHERE seg.name = 'CANTUS Database' AND i.country = 'Australia' AND c.name = '16th century (2nd half)' AND s.source_completeness = 1 ORDER BY i.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/claude/s3.csv"
            }
        },
        "gold_output_path": "gold_outputs/sources/s3.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'CANTUS Database' segment from 'Australia' and in the '16th century (2nd half)', sorted by institution siglum and source shelfmark. Make sure Complete Source is provided."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) WHERE (main_app_source.provenance_id = 3600 AND main_app_source.segment_id = 4063) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SELECT s.* FROM public.main_app_source s JOIN public.main_app_provenance p ON s.provenance_id = p.id WHERE p.name = 'Kirnberg' ORDER BY s.holding_institution_id, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/gpt/s4.csv"

            },
            "claude": {
                "sql_query": "SELECT s.* FROM main_app_source s JOIN main_app_segment seg ON s.segment_id = seg.id JOIN main_app_provenance p ON s.provenance_id = p.id WHERE seg.name = 'CANTUS Database' AND p.name = 'Kirnberg' ORDER BY s.holding_institution_id, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/claude/s4.csv"
            }
        },
        "gold_output_path": "gold_outputs/sources/s4.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'CANTUS Database' segment from any country but with a provenance of 'Kirnberg', sorted by institution siglum and source shelfmark."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) LEFT OUTER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) WHERE (main_app_source.segment_id = 4063 AND main_app_source.source_completeness = 2) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SELECT fragmentarium_id AS fragment, siglum, shelfmark FROM public.main_app_source WHERE fragmentarium_id IS NOT NULL ORDER BY siglum, shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/gpt/s5.csv"
            },
            "claude": {
                "sql_query": "SELECT s.* FROM main_app_source s JOIN main_app_segment seg ON s.segment_id = seg.id WHERE seg.name = 'CANTUS Database' AND s.source_completeness = 2 ORDER BY (SELECT siglum FROM main_app_institution WHERE id = s.holding_institution_id), s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/claude/s5.csv"
            }
        },
        "gold_output_path": "gold_outputs/sources/s5.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'CANTUS Database' segment as a Fragment, sorted by institution siglum and source shelfmark."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) LEFT OUTER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) WHERE (main_app_source.segment_id = 4063 AND main_app_source.source_completeness = 1) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SELECT s.id, s.title, s.siglum, s.shelfmark FROM public.main_app_source AS s WHERE s.source_completeness = 1 ORDER BY s.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/gpt/s6.csv"
            },
            "claude": {
                "sql_query": "",
                "predicted_output_path": ""
            }
        },
        "gold_output_path": "gold_outputs/sources/s6.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'CANTUS Database' segment as a Complete Source, sorted by institution siglum and source shelfmark."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) INNER JOIN main_app_source_century ON (main_app_source.id = main_app_source_century.source_id) INNER JOIN main_app_century ON (main_app_source_century.century_id = main_app_century.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) WHERE (UPPER(main_app_institution.country::text) LIKE UPPER('%Canada%') AND UPPER(main_app_century.name::text) LIKE UPPER('%17th century%') AND main_app_source.segment_id = 4063 AND main_app_source.source_completeness = 1) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SELECT s.id, s.title, i.siglum AS institution_siglum, s.shelfmark FROM public.main_app_source s JOIN public.main_app_source_century sc ON s.id = sc.source_id JOIN public.main_app_century c ON sc.century_id = c.id JOIN public.main_app_institution i ON s.holding_institution_id = i.id WHERE c.name = '17th century' AND s.source_completeness = 1 ORDER BY i.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/gpt/s7.csv"
            },
            "claude": {
                "sql_query": "",
                "predicted_output_path": ""
            }
        },
        "gold_output_path": "gold_outputs/sources/s7.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'CANTUS Database' segment as a Complete Source and in the '17th century', sorted by institution siglum and source shelfmark."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) INNER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) WHERE (UPPER(main_app_institution.country::text) LIKE UPPER('%Germany%') AND main_app_source.provenance_id = 3669 AND main_app_source.segment_id = 4063 AND main_app_source.source_completeness = 1) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SELECT s.* FROM public.main_app_source s JOIN public.main_app_provenance p ON s.provenance_id = p.id JOIN public.main_app_institution i ON s.holding_institution_id = i.id WHERE s.source_completeness = 1 AND i.country = 'Germany' AND p.name = 'Aachen' ORDER BY i.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/gpt/s8.csv"
            },
            "claude": {
                "sql_query": "",
                "predicted_output_path": ""
            }
        },
        "gold_output_path": "gold_outputs/sources/s8.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'CANTUS Database' segment as a Complete Source, from 'Germany' and provenance 'Aachen', sorted by institution siglum and source shelfmark."
        ]
    },
    {
    "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) INNER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) WHERE (UPPER(main_app_institution.country::text) LIKE UPPER('%Germany%') AND main_app_source.provenance_id = 3669 AND main_app_source.segment_id = 4064 AND main_app_source.source_completeness = 1) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC",
    "predicted_sql_query": {
        "gpt": {
            "sql_query": "SELECT src.* FROM main_app_source src JOIN main_app_institution inst ON src.holding_institution_id = inst.id JOIN main_app_provenance prov ON src.provenance_id = prov.id WHERE inst.country = 'Germany' AND prov.name = 'Aachen' AND src.full_source = TRUE ORDER BY inst.siglum, src.shelfmark;",
            "predicted_output_path": "predicted_outputs/sources/gpt/s9.csv"
        },
        "claude": {
            "sql_query": "",
            "predicted_output_path": ""
        }
    },
    "gold_output_path": "gold_outputs/sources/s9.csv",
    "natural_language_inputs": [
        "Given this database schema, generate a SQL query that shows me all the Sources in the 'Bower Sequence Database' segment as a Complete Source, from 'Germany' and provenance 'Aachen', sorted by institution siglum and source shelfmark."
    ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) WHERE (UPPER(main_app_institution.country::text) LIKE UPPER('%Unknown%') AND main_app_source.segment_id = 4063) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SELECT s.* FROM public.main_app_source AS s JOIN public.main_app_institution AS i ON s.holding_institution_id = i.id WHERE i.country = 'Unknown' ORDER BY i.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/gpt/s10.csv"
            },
            "claude": {
                "sql_query": "",
                "predicted_output_path": ""
            }
        },
        "gold_output_path": "gold_outputs/sources/s10.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'CANTUS Database' segment from an 'Unknown' country, sorted by institution siglum and source shelfmark."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_source_century ON (main_app_source.id = main_app_source_century.source_id) INNER JOIN main_app_century ON (main_app_source_century.century_id = main_app_century.id) INNER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) WHERE (UPPER(main_app_century.name::text) LIKE UPPER('%16th century%') AND main_app_source.provenance_id = 3645 AND main_app_source.segment_id = 4063) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SELECT s.title, i.siglum, s.shelfmark FROM public.main_app_source s JOIN public.main_app_provenance p ON s.provenance_id = p.id JOIN public.main_app_source_century sc ON s.id = sc.source_id JOIN public.main_app_century c ON sc.century_id = c.id JOIN public.main_app_institution i ON s.holding_institution_id = i.id WHERE p.name = 'Burgos (?)' AND c.name = '16th century' ORDER BY i.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/gpt/s11.csv"
            },
            "claude": {
                "sql_query": "",
                "predicted_output_path": ""
            }
        },
        "gold_output_path": "gold_outputs/sources/s11.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'CANTUS Database' segment with a provenance of 'Burgos (?)' in the '16th century', sorted by institution siglum and source shelfmark."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) INNER JOIN main_app_source_century ON (main_app_source.id = main_app_source_century.source_id) INNER JOIN main_app_century ON (main_app_source_century.century_id = main_app_century.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) WHERE (UPPER(main_app_institution.country::text) LIKE UPPER('%United States%') AND UPPER(main_app_century.name::text) LIKE UPPER('%14th century (1350-1375)%') AND main_app_source.segment_id = 4063) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SELECT s.title, s.siglum, s.shelfmark FROM public.main_app_source AS s JOIN public.main_app_source_century AS sc ON s.id = sc.source_id JOIN public.main_app_century AS c ON sc.century_id = c.id JOIN public.main_app_institution AS i ON s.holding_institution_id = i.id WHERE i.country = 'United States' AND c.name = '14th century (1350-1375)' ORDER BY i.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/gpt/s12.csv"
            },
            "claude": {
                "sql_query": "",
                "predicted_output_path": ""
            }
        },
        "gold_output_path": "gold_outputs/sources/s12.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'CANTUS Database' segment from the 'United States' in the '14th century (1350-1375), sorted by institution siglum and source shelfmark."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) WHERE (UPPER(main_app_institution.country::text) LIKE UPPER('%United States%') AND main_app_source.segment_id = 4064 AND main_app_source.source_completeness = 1) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SQL",
                "predicted_output_path": "predicted_outputs/sources/gpt/s13.csv"
            },
            "claude": {
                "sql_query": "",
                "predicted_output_path": ""
            }
        },
        "gold_output_path": "gold_outputs/sources/s13.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'Bower Sequence Database' segment as a Complete Source from the 'United States', sorted by institution siglum and source shelfmark."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) WHERE (UPPER(main_app_institution.country::text) LIKE UPPER('%[No Country]%') AND main_app_source.segment_id = 4064) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SQL",
                "predicted_output_path": "predicted_outputs/sources/gpt/s14.csv"
            },
            "claude": {
                "sql_query": "",
                "predicted_output_path": ""
            }
        },
        "gold_output_path": "gold_outputs/sources/s14.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'Bower Sequence Database' segment located in '[No Country]', sorted by institution siglum and source shelfmark."
        ]
    },
    {
        "sql_query": "SELECT DI STINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source LEFT OUTER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) LEFT OUTER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) LEFT OUTER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) WHERE main_app_source.source_completeness = 2 ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SELECT s.* FROM public.main_app_source s JOIN public.main_app_institution i ON s.holding_institution_id = i.id WHERE s.fragmentarium_id IS NOT NULL ORDER BY i.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/gpt/s15.csv"
            },
            "claude": {
                "sql_query": "",
                "predicted_output_path": ""
            }
        },
        "gold_output_path": "gold_outputs/sources/s15.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in any segment, any country, provenance, or century, but it is a fragment, sorted by institution siglum and source shelfmark."
        ]
    }
]
