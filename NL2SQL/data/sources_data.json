[
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) LEFT OUTER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) WHERE main_app_source.segment_id = 4063 ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "",
                "predicted_output_path": "predicted_outputs/sources/gpt/s1.csv"
            },
            "claude": {
                "sql_query": "SELECT s.id, s.title, s.shelfmark, i.siglum FROM main_app_source s JOIN main_app_source_segment_m2m ssm ON s.id = ssm.source_id JOIN main_app_segment seg ON ssm.segment_id = seg.id JOIN main_app_institution i ON s.holding_institution_id = i.id WHERE seg.name = 'CANTUS Database' ORDER BY i.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/claude/s1.csv"
            }
        },
        "gold_output_path": "gold_outputs/sources/s1.csv",
        "natural_language_inputs": [
            "Given this database schema, generate an SQL query that will show me all the Sources in the 'CANTUS Database' Segment, sorted by institution siglum and source shelfmark. Format your response without any formatting or newlines."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) WHERE (UPPER(main_app_institution.country::text) LIKE UPPER('%Australia%') AND main_app_source.segment_id = 4063) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SELECT s.* FROM public.main_app_source s JOIN public.main_app_institution i ON s.holding_institution_id = i.id WHERE i.country = 'Australia' ORDER BY i.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/gpt/s2.csv"
            },
            "claude": {
                "sql_query": "SELECT s.id, s.title, s.shelfmark, i.siglum FROM main_app_source s JOIN main_app_segment seg ON s.segment_id = seg.id JOIN main_app_institution i ON s.holding_institution_id = i.id WHERE seg.name = 'CANTUS Database' AND i.country = 'Australia' ORDER BY i.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/claude/s2.csv"
            }
        },
        "gold_output_path": "gold_outputs/sources/s2.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'CANTUS Database' Segment from Country 'Australia', sorted by institution siglum and source shelfmark. Format your response without any formatting or newlines."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) INNER JOIN main_app_source_century ON (main_app_source.id = main_app_source_century.source_id) INNER JOIN main_app_century ON (main_app_source_century.century_id = main_app_century.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) WHERE (UPPER(main_app_institution.country::text) LIKE UPPER('%Australia%') AND UPPER(main_app_century.name::text) LIKE UPPER('%16th century (2nd half)%') AND main_app_source.segment_id = 4063) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SELECT s.id, s.title, s.siglum, s.shelfmark FROM public.main_app_source AS s JOIN public.main_app_institution AS i ON s.holding_institution_id = i.id JOIN public.main_app_source_century AS sc ON s.id = sc.source_id JOIN public.main_app_century AS c ON sc.century_id = c.id WHERE i.country = 'Australia' AND c.name = '16th century (2nd half)' AND s.full_source = TRUE ORDER BY s.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/gpt/s3.csv"
            },
            "claude": {
                "sql_query": "SELECT s.id, s.title, s.shelfmark, i.siglum FROM main_app_source s JOIN main_app_segment seg ON s.segment_id = seg.id JOIN main_app_source_century sc ON s.id = sc.source_id JOIN main_app_century c ON sc.century_id = c.id JOIN main_app_institution i ON s.holding_institution_id = i.id WHERE seg.name = 'CANTUS Database' AND i.country = 'Australia' AND c.name = '16th century (2nd half)' AND s.source_completeness = 1 ORDER BY i.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/claude/s3.csv"
            }
        },
        "gold_output_path": "gold_outputs/sources/s3.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'CANTUS Database' Segment from Country 'Australia' and in the Century '16th century (2nd half)', sorted by institution siglum and source shelfmark. Make sure Complete Source is provided. Format your response without any formatting or newlines."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) WHERE (main_app_source.provenance_id = 3600 AND main_app_source.segment_id = 4063) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SELECT s.* FROM public.main_app_source s JOIN public.main_app_provenance p ON s.provenance_id = p.id WHERE p.name = 'Kirnberg' ORDER BY s.holding_institution_id, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/gpt/s4.csv"

            },
            "claude": {
                "sql_query": "SELECT s.id, s.title, s.shelfmark, i.siglum, i.country, p.name AS provenance_name FROM main_app_source s JOIN main_app_segment seg ON s.segment_id = seg.id JOIN main_app_institution i ON s.holding_institution_id = i.id JOIN main_app_provenance p ON s.provenance_id = p.id WHERE seg.name = 'CANTUS Database' AND p.name = 'Kirnberg' ORDER BY i.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/claude/s4.csv"
            }
        },
        "gold_output_path": "gold_outputs/sources/s4.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'CANTUS Database' segment from any Country but with a Provenance of 'Kirnberg', sorted by institution siglum and source shelfmark. Format your response without any formatting or newlines."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) LEFT OUTER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) WHERE (main_app_source.segment_id = 4063 AND main_app_source.source_completeness = 2) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SELECT fragmentarium_id AS fragment, siglum, shelfmark FROM public.main_app_source WHERE fragmentarium_id IS NOT NULL ORDER BY siglum, shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/gpt/s5.csv"
            },
            "claude": {
                "sql_query": "SELECT s.id, s.title, s.shelfmark, i.siglum FROM main_app_source s JOIN main_app_segment seg ON s.segment_id = seg.id JOIN main_app_institution i ON s.holding_institution_id = i.id WHERE seg.name = 'CANTUS Database' AND s.source_completeness = 2 ORDER BY i.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/claude/s5.csv"
            }
        },
        "gold_output_path": "gold_outputs/sources/s5.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'CANTUS Database' Segment as a Fragment, sorted by institution siglum and source shelfmark. Format your response without any formatting or newlines."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) LEFT OUTER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) WHERE (main_app_source.segment_id = 4063 AND main_app_source.source_completeness = 1) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SELECT s.id, s.title, s.siglum, s.shelfmark FROM public.main_app_source AS s WHERE s.source_completeness = 1 ORDER BY s.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/gpt/s6.csv"
            },
            "claude": {
                "sql_query": "SELECT s.id, s.title, s.shelfmark, i.siglum FROM main_app_source s JOIN main_app_segment seg ON s.segment_id = seg.id JOIN main_app_institution i ON s.holding_institution_id = i.id WHERE seg.name = 'CANTUS Database' AND s.source_completeness = 1 ORDER BY i.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/claude/s6.csv"
            }
        },
        "gold_output_path": "gold_outputs/sources/s6.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'CANTUS Database' Segment as a Complete Source, sorted by institution siglum and source shelfmark. Format your response without any formatting or newlines."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) INNER JOIN main_app_source_century ON (main_app_source.id = main_app_source_century.source_id) INNER JOIN main_app_century ON (main_app_source_century.century_id = main_app_century.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) WHERE (UPPER(main_app_institution.country::text) LIKE UPPER('%Canada%') AND UPPER(main_app_century.name::text) LIKE UPPER('%17th century%') AND main_app_source.segment_id = 4063 AND main_app_source.source_completeness = 1) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SELECT s.id, s.title, i.siglum AS institution_siglum, s.shelfmark FROM public.main_app_source s JOIN public.main_app_source_century sc ON s.id = sc.source_id JOIN public.main_app_century c ON sc.century_id = c.id JOIN public.main_app_institution i ON s.holding_institution_id = i.id WHERE c.name = '17th century' AND s.source_completeness = 1 ORDER BY i.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/gpt/s7.csv"
            },
            "claude": {
                "sql_query": "SELECT s.id, s.title, s.shelfmark, i.siglum FROM main_app_source s JOIN main_app_segment seg ON s.segment_id = seg.id JOIN main_app_source_century sc ON s.id = sc.source_id JOIN main_app_century c ON sc.century_id = c.id JOIN main_app_institution i ON s.holding_institution_id = i.id WHERE seg.name = 'CANTUS Database' AND s.source_completeness = 1 AND c.name = '17th century' ORDER BY i.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/claude/s7.csv"
            }
        },
        "gold_output_path": "gold_outputs/sources/s7.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'CANTUS Database' Segment as a Complete Source and in the Century '17th century', sorted by institution siglum and source shelfmark. Format your response without any formatting or newlines."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) INNER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) WHERE (UPPER(main_app_institution.country::text) LIKE UPPER('%Germany%') AND main_app_source.provenance_id = 3669 AND main_app_source.segment_id = 4063 AND main_app_source.source_completeness = 1) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SELECT s.* FROM public.main_app_source s JOIN public.main_app_provenance p ON s.provenance_id = p.id JOIN public.main_app_institution i ON s.holding_institution_id = i.id WHERE s.source_completeness = 1 AND i.country = 'Germany' AND p.name = 'Aachen' ORDER BY i.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/gpt/s8.csv"
            },
            "claude": {
                "sql_query": "",
                "predicted_output_path": ""
            }
        },
        "gold_output_path": "gold_outputs/sources/s8.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'CANTUS Database' Segment as a Complete Source, from the Country 'Germany' and Provenance 'Aachen', sorted by institution siglum and source shelfmark. Format your response without any formatting or newlines."
        ]
    },
    {
    "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) INNER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) WHERE (UPPER(main_app_institution.country::text) LIKE UPPER('%Germany%') AND main_app_source.provenance_id = 3669 AND main_app_source.segment_id = 4064 AND main_app_source.source_completeness = 1) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC",
    "predicted_sql_query": {
        "gpt": {
            "sql_query": "SELECT src.* FROM main_app_source src JOIN main_app_institution inst ON src.holding_institution_id = inst.id JOIN main_app_provenance prov ON src.provenance_id = prov.id WHERE inst.country = 'Germany' AND prov.name = 'Aachen' AND src.full_source = TRUE ORDER BY inst.siglum, src.shelfmark;",
            "predicted_output_path": "predicted_outputs/sources/gpt/s9.csv"
        },
        "claude": {
            "sql_query": "",
            "predicted_output_path": ""
        }
    },
    "gold_output_path": "gold_outputs/sources/s9.csv",
    "natural_language_inputs": [
        "Given this database schema, generate a SQL query that shows me all the Sources in the 'Bower Sequence Database' Segment as a Complete Source, from the Country 'Germany' and Provenance 'Aachen', sorted by institution siglum and source shelfmark. Format your response without any formatting or newlines."
    ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) WHERE (UPPER(main_app_institution.country::text) LIKE UPPER('%Unknown%') AND main_app_source.segment_id = 4063) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SELECT s.* FROM public.main_app_source AS s JOIN public.main_app_institution AS i ON s.holding_institution_id = i.id WHERE i.country = 'Unknown' ORDER BY i.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/gpt/s10.csv"
            },
            "claude": {
                "sql_query": "",
                "predicted_output_path": ""
            }
        },
        "gold_output_path": "gold_outputs/sources/s10.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'CANTUS Database' Segment from an 'Unknown' Country, sorted by institution siglum and source shelfmark. Format your response without any formatting or newlines."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_source_century ON (main_app_source.id = main_app_source_century.source_id) INNER JOIN main_app_century ON (main_app_source_century.century_id = main_app_century.id) INNER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) WHERE (UPPER(main_app_century.name::text) LIKE UPPER('%16th century%') AND main_app_source.provenance_id = 3645 AND main_app_source.segment_id = 4063) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SELECT s.title, i.siglum, s.shelfmark FROM public.main_app_source s JOIN public.main_app_provenance p ON s.provenance_id = p.id JOIN public.main_app_source_century sc ON s.id = sc.source_id JOIN public.main_app_century c ON sc.century_id = c.id JOIN public.main_app_institution i ON s.holding_institution_id = i.id WHERE p.name = 'Burgos (?)' AND c.name = '16th century' ORDER BY i.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/gpt/s11.csv"
            },
            "claude": {
                "sql_query": "",
                "predicted_output_path": ""
            }
        },
        "gold_output_path": "gold_outputs/sources/s11.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'CANTUS Database' Segment with a Provenance of 'Burgos (?)' in the Century '16th century', sorted by institution siglum and source shelfmark. Format your response without any formatting or newlines."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) INNER JOIN main_app_source_century ON (main_app_source.id = main_app_source_century.source_id) INNER JOIN main_app_century ON (main_app_source_century.century_id = main_app_century.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) WHERE (UPPER(main_app_institution.country::text) LIKE UPPER('%United States%') AND UPPER(main_app_century.name::text) LIKE UPPER('%14th century (1350-1375)%') AND main_app_source.segment_id = 4063) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SELECT s.title, s.siglum, s.shelfmark FROM public.main_app_source AS s JOIN public.main_app_source_century AS sc ON s.id = sc.source_id JOIN public.main_app_century AS c ON sc.century_id = c.id JOIN public.main_app_institution AS i ON s.holding_institution_id = i.id WHERE i.country = 'United States' AND c.name = '14th century (1350-1375)' ORDER BY i.siglum, s.shelfmark;",
                "predicted_output_path": "predicted_outputs/sources/gpt/s12.csv"
            },
            "claude": {
                "sql_query": "",
                "predicted_output_path": ""
            }
        },
        "gold_output_path": "gold_outputs/sources/s12.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'CANTUS Database' Segment from the Country 'United States' in the Century '14th century (1350-1375), sorted by institution siglum and source shelfmark. Format your response without any formatting or newlines."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) WHERE (UPPER(main_app_institution.country::text) LIKE UPPER('%Germany%') AND main_app_source.segment_id = 4063 AND main_app_source.source_completeness IN (1, 2, 3, 4) AND (UPPER(UNACCENT(main_app_source.shelfmark)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('Clm')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(UNACCENT(main_app_source.shelfmark)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('4501-4663')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(UNACCENT(main_app_source.shelfmark)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('neu')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(UNACCENT(main_app_source.shelfmark)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('beschrieben')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(UNACCENT(main_app_institution.siglum)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('Clm')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(UNACCENT(main_app_institution.siglum)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('4501-4663')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(UNACCENT(main_app_institution.siglum)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('neu')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(UNACCENT(main_app_institution.siglum)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('beschrieben')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(UNACCENT(main_app_source.description)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('Clm')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(UNACCENT(main_app_source.description)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('4501-4663')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(UNACCENT(main_app_source.description)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('neu')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(UNACCENT(main_app_source.description)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('beschrieben')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(UNACCENT(main_app_source.summary)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('Clm')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(UNACCENT(main_app_source.summary)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('4501-4663')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(UNACCENT(main_app_source.summary)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('neu')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(UNACCENT(main_app_source.summary)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('beschrieben')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(main_app_institution.name::text) LIKE UPPER('%Clm%') OR UPPER(main_app_institution.name::text) LIKE UPPER('%4501-4663%') OR UPPER(main_app_institution.name::text) LIKE UPPER('%neu%') OR UPPER(main_app_institution.name::text) LIKE UPPER('%beschrieben%') OR UPPER(main_app_institution.city::text) LIKE UPPER('%Clm%') OR UPPER(main_app_institution.city::text) LIKE UPPER('%4501-4663%') OR UPPER(main_app_institution.city::text) LIKE UPPER('%neu%') OR UPPER(main_app_institution.city::text) LIKE UPPER('%beschrieben%') OR UPPER(main_app_source.name::text) LIKE UPPER('%Clm%') OR UPPER(main_app_source.name::text) LIKE UPPER('%4501-4663%') OR UPPER(main_app_source.name::text) LIKE UPPER('%neu%') OR UPPER(main_app_source.name::text) LIKE UPPER('%beschrieben%'))) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SQL",
                "predicted_output_path": "predicted_outputs/sources/gpt/s13.csv"
            },
            "claude": {
                "sql_query": "",
                "predicted_output_path": ""
            }
        },
        "gold_output_path": "gold_outputs/sources/s13.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'CANTUS Database' Segment, with General search containing 'Clm 4501-4663 neu beschrieben' from Country 'Germany', sorted by institution siglum and source shelfmark. Format your response without any formatting or newlines."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_source_century ON (main_app_source.id = main_app_source_century.source_id) INNER JOIN main_app_century ON (main_app_source_century.century_id = main_app_century.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) LEFT OUTER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) WHERE (UPPER(main_app_century.name::text) LIKE UPPER('%12th century (1125-1150)%') AND main_app_source.segment_id = 4064 AND main_app_source.source_completeness IN (1, 2, 3, 4) AND (UPPER(UNACCENT(main_app_source.shelfmark)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('Iowa')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(UNACCENT(main_app_source.shelfmark)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('City')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(UNACCENT(main_app_institution.siglum)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('Iowa')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(UNACCENT(main_app_institution.siglum)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('City')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(UNACCENT(main_app_source.description)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('Iowa')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(UNACCENT(main_app_source.description)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('City')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(UNACCENT(main_app_source.summary)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('Iowa')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(UNACCENT(main_app_source.summary)::text) LIKE '%' || UPPER(REPLACE(REPLACE(REPLACE((UNACCENT('City')), E'\\\\', E'\\\\\\\\'), E'%', E'\\\\%'), E'_', E'\\\\_')) || '%' OR UPPER(main_app_institution.name::text) LIKE UPPER('%Iowa%') OR UPPER(main_app_institution.name::text) LIKE UPPER('%City%') OR UPPER(main_app_institution.city::text) LIKE UPPER('%Iowa%') OR UPPER(main_app_institution.city::text) LIKE UPPER('%City%') OR UPPER(main_app_source.name::text) LIKE UPPER('%Iowa%') OR UPPER(main_app_source.name::text) LIKE UPPER('%City%'))) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "SQL",
                "predicted_output_path": "predicted_outputs/sources/gpt/s14.csv"
            },
            "claude": {
                "sql_query": "",
                "predicted_output_path": ""
            }
        },
        "gold_output_path": "gold_outputs/sources/s14.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'Bower Sequence Database' segment, with General search containing 'Iowa City' in the Century '12th century (1125-1150), sorted by institution siglum and source shelfmark. Format your response without any formatting or newlines."
        ]
    },
    {
        "sql_query": "SELECT DISTINCT main_app_source.id, main_app_source.date_created, main_app_source.date_updated, main_app_source.created_by_id, main_app_source.last_updated_by_id, main_app_source.published, main_app_source.title, main_app_source.siglum, main_app_source.holding_institution_id, main_app_source.shelfmark, main_app_source.name, main_app_source.provenance_id, main_app_source.provenance_notes, main_app_source.source_completeness, main_app_source.full_source, main_app_source.date, main_app_source.cursus, main_app_source.segment_id, main_app_source.source_status, main_app_source.complete_inventory, main_app_source.summary, main_app_source.liturgical_occasions, main_app_source.description, main_app_source.selected_bibliography, main_app_source.image_link, main_app_source.indexing_notes, main_app_source.indexing_date, main_app_source.json_info, main_app_source.fragmentarium_id, main_app_source.dact_id, main_app_source.exists_on_cantus_ultimus, main_app_source.production_method, main_app_source.number_of_chants, main_app_source.number_of_melodies, main_app_institution.id, main_app_institution.date_created, main_app_institution.date_updated, main_app_institution.created_by_id, main_app_institution.last_updated_by_id, main_app_institution.name, main_app_institution.siglum, main_app_institution.is_private_collector, main_app_institution.is_private_collection, main_app_institution.city, main_app_institution.region, main_app_institution.country, main_app_institution.alternate_names, main_app_institution.former_sigla, main_app_institution.private_notes, main_app_institution.migrated_identifier, main_app_provenance.id, main_app_provenance.date_created, main_app_provenance.date_updated, main_app_provenance.created_by_id, main_app_provenance.last_updated_by_id, main_app_provenance.name, main_app_segment.id, main_app_segment.date_created, main_app_segment.date_updated, main_app_segment.created_by_id, main_app_segment.last_updated_by_id, main_app_segment.name FROM main_app_source INNER JOIN main_app_provenance ON (main_app_source.provenance_id = main_app_provenance.id) INNER JOIN main_app_segment ON (main_app_source.segment_id = main_app_segment.id) LEFT OUTER JOIN main_app_source_inventoried_by ON (main_app_source.id = main_app_source_inventoried_by.source_id) LEFT OUTER JOIN users_user ON (main_app_source_inventoried_by.user_id = users_user.id) LEFT OUTER JOIN main_app_source_full_text_entered_by ON (main_app_source.id = main_app_source_full_text_entered_by.source_id) LEFT OUTER JOIN users_user T7 ON (main_app_source_full_text_entered_by.user_id = T7.id) LEFT OUTER JOIN main_app_source_melodies_entered_by ON (main_app_source.id = main_app_source_melodies_entered_by.source_id) LEFT OUTER JOIN users_user T9 ON (main_app_source_melodies_entered_by.user_id = T9.id) LEFT OUTER JOIN main_app_source_proofreaders ON (main_app_source.id = main_app_source_proofreaders.source_id) LEFT OUTER JOIN users_user T11 ON (main_app_source_proofreaders.user_id = T11.id) LEFT OUTER JOIN main_app_source_other_editors ON (main_app_source.id = main_app_source_other_editors.source_id) LEFT OUTER JOIN users_user T13 ON (main_app_source_other_editors.user_id = T13.id) LEFT OUTER JOIN main_app_institution ON (main_app_source.holding_institution_id = main_app_institution.id) WHERE (main_app_source.provenance_id = 3629 AND main_app_source.segment_id = 4063 AND (UPPER(users_user.full_name::text) LIKE UPPER('%GB-Ojec%') OR UPPER(users_user.full_name::text) LIKE UPPER('%MS.%') OR UPPER(users_user.full_name::text) LIKE UPPER('%4%') OR UPPER(T7.full_name::text) LIKE UPPER('%GB-Ojec%') OR UPPER(T7.full_name::text) LIKE UPPER('%MS.%') OR UPPER(T7.full_name::text) LIKE UPPER('%4%') OR UPPER(T9.full_name::text) LIKE UPPER('%GB-Ojec%') OR UPPER(T9.full_name::text) LIKE UPPER('%MS.%') OR UPPER(T9.full_name::text) LIKE UPPER('%4%') OR UPPER(T11.full_name::text) LIKE UPPER('%GB-Ojec%') OR UPPER(T11.full_name::text) LIKE UPPER('%MS.%') OR UPPER(T11.full_name::text) LIKE UPPER('%4%') OR UPPER(T13.full_name::text) LIKE UPPER('%GB-Ojec%') OR UPPER(T13.full_name::text) LIKE UPPER('%MS.%') OR UPPER(T13.full_name::text) LIKE UPPER('%4%') OR UPPER(main_app_source.indexing_notes::text) LIKE UPPER('%GB-Ojec%') OR UPPER(main_app_source.indexing_notes::text) LIKE UPPER('%MS.%') OR UPPER(main_app_source.indexing_notes::text) LIKE UPPER('%4%'))) ORDER BY main_app_institution.siglum ASC, main_app_source.shelfmark ASC;",
        "predicted_sql_query": {
            "gpt": {
                "sql_query": "",
                "predicted_output_path": "predicted_outputs/sources/gpt/s15.csv"
            },
            "claude": {
                "sql_query": "",
                "predicted_output_path": ""
            }
        },
        "gold_output_path": "gold_outputs/sources/s15.csv",
        "natural_language_inputs": [
            "Given this database schema, generate a SQL query that shows me all the Sources in the 'CANTUS Database' segment, with Indexing Notes that contains 'GB-Ojec MS. 4', from Provenance 'Arras', sorted by institution siglum and source shelfmark. Format your response without any formatting or newlines."
        ]
    }
]
